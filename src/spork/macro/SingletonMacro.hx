package spork.macro;

import haxe.ds.StringMap;
import haxe.macro.Context;
import haxe.macro.Expr;
import haxe.macro.Type;

class SingletonMacro {
	public static macro function build(): Array<Field> {
		var fields = Context.getBuildFields();
		var clazz = Context.getLocalClass().get();
		var clazzTypePath = spork.core.Macro.makeTypePath(clazz);

		// map field names to fields
		var fieldMap = new StringMap<Field>();
		for (field in fields) {
			fieldMap.set(field.name, field);
		}

		// add instance if necessary
		if (!fieldMap.exists("instance")) {
			fields.push({
				name: "instance",
				doc: "Contains the instance of singleton \n\nGenerated by macro",
				access: [APublic, AStatic],
				pos: Context.currentPos(),
				kind: FProp("default", "null", TPath(clazzTypePath))
			});
		}

		// add setInstace if necessary
		if (!fieldMap.exists("setInstance")) {
			fields.push({
				name: "setInstance",
				doc: "Sets the singleton instance \n\nGenerated by macro",
				access: [APublic, AStatic],
				pos: Context.currentPos(),
				kind: FFun({
					args: [{name: "value", type: TPath(clazzTypePath)}],
					expr: macro instance = value
				})
			});
		}

		return fields;
	}
}
